{"version":3,"sources":["../../src/addon/mod/forum/pages/new-discussion/new-discussion.module.ts","../../src/addon/mod/forum/pages/new-discussion/new-discussion.ts"],"names":[],"mappings":"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","file":"79.js","sourcesContent":["// (C) Copyright 2015 Martin Dougiamas\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { CoreComponentsModule } from '@components/components.module';\r\nimport { CoreDirectivesModule } from '@directives/directives.module';\r\nimport { AddonModForumNewDiscussionPage } from './new-discussion';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AddonModForumNewDiscussionPage,\r\n    ],\r\n    imports: [\r\n        CoreComponentsModule,\r\n        CoreDirectivesModule,\r\n        IonicPageModule.forChild(AddonModForumNewDiscussionPage),\r\n        TranslateModule.forChild()\r\n    ],\r\n})\r\nexport class AddonModForumNewDiscussionPageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/mod/forum/pages/new-discussion/new-discussion.module.ts","// (C) Copyright 2015 Martin Dougiamas\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnDestroy, Optional, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { CoreEventsProvider } from '@providers/events';\r\nimport { CoreGroupsProvider } from '@providers/groups';\r\nimport { CoreSitesProvider } from '@providers/sites';\r\nimport { CoreSyncProvider } from '@providers/sync';\r\nimport { CoreDomUtilsProvider } from '@providers/utils/dom';\r\nimport { CoreTextUtilsProvider } from '@providers/utils/text';\r\nimport { CoreUtilsProvider } from '@providers/utils/utils';\r\nimport { CoreFileUploaderProvider } from '@core/fileuploader/providers/fileuploader';\r\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\r\nimport { CoreRichTextEditorComponent } from '@components/rich-text-editor/rich-text-editor.ts';\r\nimport { AddonModForumProvider } from '../../providers/forum';\r\nimport { AddonModForumOfflineProvider } from '../../providers/offline';\r\nimport { AddonModForumHelperProvider } from '../../providers/helper';\r\nimport { AddonModForumSyncProvider } from '../../providers/sync';\r\n\r\n/**\r\n * Page that displays the new discussion form.\r\n */\r\n@IonicPage({ segment: 'addon-mod-forum-new-discussion' })\r\n@Component({\r\n    selector: 'page-addon-mod-forum-new-discussion',\r\n    templateUrl: 'new-discussion.html',\r\n})\r\nexport class AddonModForumNewDiscussionPage implements OnDestroy {\r\n\r\n    @ViewChild(CoreRichTextEditorComponent) messageEditor: CoreRichTextEditorComponent;\r\n\r\n    component = AddonModForumProvider.COMPONENT;\r\n    messageControl = new FormControl();\r\n    groupsLoaded = false;\r\n    showGroups = false;\r\n    hasOffline = false;\r\n    canCreateAttachments = true; // Assume we can by default.\r\n    canPin = false;\r\n    forum: any;\r\n    showForm = false;\r\n    groups = [];\r\n    newDiscussion = {\r\n        subject: '',\r\n        message: null, // Null means empty or just white space.\r\n        groupId: 0,\r\n        subscribe: true,\r\n        pin: false,\r\n        files: []\r\n    };\r\n\r\n    protected courseId: number;\r\n    protected cmId: number;\r\n    protected forumId: number;\r\n    protected timeCreated: number;\r\n    protected syncId: string;\r\n    protected syncObserver: any;\r\n    protected isDestroyed = false;\r\n    protected originalData: any;\r\n\r\n    constructor(navParams: NavParams,\r\n            private navCtrl: NavController,\r\n            private translate: TranslateService,\r\n            private domUtils: CoreDomUtilsProvider,\r\n            private eventsProvider: CoreEventsProvider,\r\n            private groupsProvider: CoreGroupsProvider,\r\n            private sitesProvider: CoreSitesProvider,\r\n            private syncProvider: CoreSyncProvider,\r\n            private uploaderProvider: CoreFileUploaderProvider,\r\n            private textUtils: CoreTextUtilsProvider,\r\n            private utils: CoreUtilsProvider,\r\n            private forumProvider: AddonModForumProvider,\r\n            private forumOffline: AddonModForumOfflineProvider,\r\n            private forumSync: AddonModForumSyncProvider,\r\n            private forumHelper: AddonModForumHelperProvider,\r\n            @Optional() private svComponent: CoreSplitViewComponent) {\r\n        this.courseId = navParams.get('courseId');\r\n        this.cmId = navParams.get('cmId');\r\n        this.forumId = navParams.get('forumId');\r\n        this.timeCreated = navParams.get('timeCreated');\r\n    }\r\n\r\n    /**\r\n     * Component being initialized.\r\n     */\r\n    ngOnInit(): void {\r\n        this.fetchDiscussionData().finally(() => {\r\n            this.groupsLoaded = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * User entered the page that contains the component.\r\n     */\r\n    ionViewDidEnter(): void {\r\n        // Refresh data if this discussion is synchronized automatically.\r\n        this.syncObserver = this.eventsProvider.on(AddonModForumSyncProvider.AUTO_SYNCED, (data) => {\r\n            if (data.forumId == this.forumId && data.userId == this.sitesProvider.getCurrentSiteUserId()) {\r\n                this.domUtils.showAlertTranslated('core.notice', 'core.contenteditingsynced');\r\n                this.returnToDiscussions();\r\n            }\r\n        }, this.sitesProvider.getCurrentSiteId());\r\n\r\n        // Trigger view event, to highlight the current opened discussion in the split view.\r\n        this.eventsProvider.trigger(AddonModForumProvider.VIEW_DISCUSSION_EVENT, {\r\n            forumId: this.forumId,\r\n            discussion: -this.timeCreated\r\n        }, this.sitesProvider.getCurrentSiteId());\r\n    }\r\n\r\n    /**\r\n     * Fetch if forum uses groups and the groups it uses.\r\n     *\r\n     * @param  {boolean} [refresh] Whether we're refreshing data.\r\n     * @return {Promise<any>} Promise resolved when done.\r\n     */\r\n    protected fetchDiscussionData(refresh?: boolean): Promise<any> {\r\n        return this.groupsProvider.getActivityGroupMode(this.cmId).then((mode) => {\r\n            const promises = [];\r\n\r\n            if (mode === CoreGroupsProvider.SEPARATEGROUPS || mode === CoreGroupsProvider.VISIBLEGROUPS) {\r\n                promises.push(this.groupsProvider.getActivityAllowedGroups(this.cmId).then((forumGroups) => {\r\n                    let promise;\r\n                    if (mode === CoreGroupsProvider.VISIBLEGROUPS) {\r\n                        // We need to check which of the returned groups the user can post to.\r\n                        promise = this.validateVisibleGroups(forumGroups);\r\n                    } else {\r\n                        // WS already filters groups, no need to do it ourselves. Add \"All participants\" if needed.\r\n                        promise = this.addAllParticipantsOption(forumGroups, true);\r\n                    }\r\n\r\n                    return promise.then((forumGroups) => {\r\n                        if (forumGroups.length > 0) {\r\n                            this.groups = forumGroups;\r\n                            // Do not override group id.\r\n                            this.newDiscussion.groupId = this.newDiscussion.groupId || forumGroups[0].id;\r\n                            this.showGroups = true;\r\n                        } else {\r\n                            const message = mode === CoreGroupsProvider.SEPARATEGROUPS ?\r\n                                    'addon.mod_forum.cannotadddiscussionall' : 'addon.mod_forum.cannotadddiscussion';\r\n\r\n                            return Promise.reject(this.translate.instant(message));\r\n                        }\r\n                    });\r\n                }));\r\n            } else {\r\n                this.showGroups = false;\r\n\r\n                // Use the canAddDiscussion WS to check if the user can add attachments and pin discussions.\r\n                promises.push(this.forumProvider.canAddDiscussionToAll(this.forumId).then((response) => {\r\n                    this.canPin = !!response.canpindiscussions;\r\n                    this.canCreateAttachments = !!response.cancreateattachment;\r\n                }).catch(() => {\r\n                    // Ignore errors, use default values.\r\n                }));\r\n            }\r\n\r\n            // Get forum.\r\n            promises.push(this.forumProvider.getForum(this.courseId, this.cmId).then((forum) => {\r\n                this.forum = forum;\r\n            }));\r\n\r\n            // If editing a discussion, get offline data.\r\n            if (this.timeCreated && !refresh) {\r\n                this.syncId = this.forumSync.getForumSyncId(this.forumId);\r\n                promises.push(this.forumSync.waitForSync(this.syncId).then(() => {\r\n                    // Do not block if the scope is already destroyed.\r\n                    if (!this.isDestroyed) {\r\n                        this.syncProvider.blockOperation(AddonModForumProvider.COMPONENT, this.syncId);\r\n                    }\r\n\r\n                    return this.forumOffline.getNewDiscussion(this.forumId, this.timeCreated).then((discussion) => {\r\n                        this.hasOffline = true;\r\n                        discussion.options = discussion.options || {};\r\n                        this.newDiscussion.groupId = discussion.groupid ? discussion.groupid : this.newDiscussion.groupId;\r\n                        this.newDiscussion.subject = discussion.subject;\r\n                        this.newDiscussion.message = discussion.message;\r\n                        this.newDiscussion.subscribe = discussion.options.discussionsubscribe;\r\n                        this.newDiscussion.pin = discussion.options.discussionpinned;\r\n                        this.messageControl.setValue(discussion.message);\r\n\r\n                        // Treat offline attachments if any.\r\n                        if (discussion.options.attachmentsid && discussion.options.attachmentsid.offline) {\r\n                            return this.forumHelper.getNewDiscussionStoredFiles(this.forumId, this.timeCreated).then((files) => {\r\n                                this.newDiscussion.files = files;\r\n                            });\r\n                        }\r\n                    });\r\n                }));\r\n            }\r\n\r\n            return Promise.all(promises);\r\n        }).then(() => {\r\n            if (!this.originalData) {\r\n                // Initialize original data.\r\n                this.originalData = {\r\n                    subject: this.newDiscussion.subject,\r\n                    message: this.newDiscussion.message,\r\n                    files: this.newDiscussion.files.slice(),\r\n                };\r\n            }\r\n            this.showForm = true;\r\n        }).catch((message) => {\r\n            this.domUtils.showErrorModalDefault(message, 'addon.mod_forum.errorgetgroups', true);\r\n            this.showForm = false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Validate which of the groups returned by getActivityAllowedGroups in visible groups should be shown to post to.\r\n     *\r\n     * @param  {any[]} forumGroups Forum groups.\r\n     * @return {Promise<any>} Promise resolved when done.\r\n     */\r\n    protected validateVisibleGroups(forumGroups: any[]): Promise<any> {\r\n        // We first check if the user can post to all the groups.\r\n        return this.forumProvider.canAddDiscussionToAll(this.forumId).catch(() => {\r\n            // The call failed, let's assume he can't.\r\n            return {\r\n                status: false,\r\n                canpindiscussions: false,\r\n                cancreateattachment: true\r\n            };\r\n        }).then((response) => {\r\n            this.canPin = !!response.canpindiscussions;\r\n            this.canCreateAttachments = !!response.cancreateattachment;\r\n\r\n            if (response.status) {\r\n                // The user can post to all groups, add the \"All participants\" option and return them all.\r\n                return this.addAllParticipantsOption(forumGroups, false);\r\n            } else {\r\n                // The user can't post to all groups, let's check which groups he can post to.\r\n                const promises = [];\r\n                const filtered = [];\r\n\r\n                forumGroups.forEach((group) => {\r\n                    promises.push(this.forumProvider.canAddDiscussion(this.forumId, group.id).catch(() => {\r\n                        /* The call failed, let's return true so the group is shown. If the user can't post to\r\n                           it an error will be shown when he tries to add the discussion. */\r\n                        return {\r\n                            status: true\r\n                        };\r\n                    }).then((response) => {\r\n                        if (response.status) {\r\n                            filtered.push(group);\r\n                        }\r\n                    }));\r\n                });\r\n\r\n                return Promise.all(promises).then(() => {\r\n                    return filtered;\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Filter forum groups, returning only those that are inside user groups.\r\n     *\r\n     * @param  {any[]} forumGroups Forum groups.\r\n     * @param  {any[]} userGroups User groups.\r\n     * @return {any[]} Filtered groups.\r\n     */\r\n    protected filterGroups(forumGroups: any[], userGroups: any[]): any[] {\r\n        const filtered = [];\r\n        const userGroupsIds = userGroups.map((g) => g.id);\r\n\r\n        forumGroups.forEach((fg) => {\r\n            if (userGroupsIds.indexOf(fg.id) > -1) {\r\n                filtered.push(fg);\r\n            }\r\n        });\r\n\r\n        return filtered;\r\n    }\r\n\r\n    /**\r\n     * Add the \"All participants\" option to a list of groups if the user can add a discussion to all participants.\r\n     *\r\n     * @param  {any[]}   groups Groups.\r\n     * @param  {boolean} check  True to check if the user can add a discussion to all participants.\r\n     * @return {Promise<any[]>} Promise resolved with the list of groups.\r\n     */\r\n    protected addAllParticipantsOption(groups: any[], check: boolean): Promise<any[]> {\r\n        if (!this.forumProvider.isAllParticipantsFixed()) {\r\n            // All participants has a bug, don't add it.\r\n            return Promise.resolve(groups);\r\n        }\r\n\r\n        let promise;\r\n\r\n        if (check) {\r\n            // We need to check if the user can add a discussion to all participants.\r\n            promise = this.forumProvider.canAddDiscussionToAll(this.forumId).then((response) => {\r\n                this.canPin = !!response.canpindiscussions;\r\n                this.canCreateAttachments = !!response.cancreateattachment;\r\n\r\n                return response.status;\r\n            }).catch(() => {\r\n                // The call failed, let's assume he can't.\r\n                return false;\r\n            });\r\n        } else {\r\n            // No need to check, assume the user can.\r\n            promise = Promise.resolve(true);\r\n        }\r\n\r\n        return promise.then((canAdd) => {\r\n            if (canAdd) {\r\n                groups.unshift({\r\n                    courseid: this.courseId,\r\n                    id: -1,\r\n                    name: this.translate.instant('core.allparticipants')\r\n                });\r\n            }\r\n\r\n            return groups;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Pull to refresh.\r\n     *\r\n     * @param {any} refresher Refresher.\r\n     */\r\n    refreshGroups(refresher: any): void {\r\n        const promises = [\r\n            this.groupsProvider.invalidateActivityGroupMode(this.cmId),\r\n            this.groupsProvider.invalidateActivityAllowedGroups(this.cmId),\r\n            this.forumProvider.invalidateCanAddDiscussion(this.forumId),\r\n        ];\r\n\r\n        Promise.all(promises).finally(() => {\r\n            this.fetchDiscussionData(true).finally(() => {\r\n                refresher.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Convenience function to update or return to discussions depending on device.\r\n     *\r\n     * @param {number} [discussionId] Id of the new discussion.\r\n     */\r\n    protected returnToDiscussions(discussionId?: number): void {\r\n        const data: any = {\r\n            forumId: this.forumId,\r\n            cmId: this.cmId,\r\n            discussionId: discussionId,\r\n        };\r\n        this.eventsProvider.trigger(AddonModForumProvider.NEW_DISCUSSION_EVENT, data, this.sitesProvider.getCurrentSiteId());\r\n\r\n        // Delete the local files from the tmp folder.\r\n        this.uploaderProvider.clearTmpFiles(this.newDiscussion.files);\r\n\r\n        if (this.svComponent && this.svComponent.isOn()) {\r\n            // Empty form.\r\n            this.hasOffline = false;\r\n            this.newDiscussion.subject = '';\r\n            this.newDiscussion.message = null;\r\n            this.newDiscussion.files = [];\r\n            this.messageEditor.clearText();\r\n            this.originalData = this.utils.clone(this.newDiscussion);\r\n\r\n            // Trigger view event, to highlight the current opened discussion in the split view.\r\n            this.eventsProvider.trigger(AddonModForumProvider.VIEW_DISCUSSION_EVENT, {\r\n                forumId: this.forumId,\r\n                discussion: 0\r\n            }, this.sitesProvider.getCurrentSiteId());\r\n        } else {\r\n            this.originalData = null; // Avoid asking for confirmation.\r\n            this.navCtrl.pop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Message changed.\r\n     *\r\n     * @param {string} text The new text.\r\n     */\r\n    onMessageChange(text: string): void {\r\n        this.newDiscussion.message = text;\r\n    }\r\n\r\n    /**\r\n     * Add a new discussion.\r\n     */\r\n    add(): void {\r\n        const forumName = this.forum.name;\r\n        const subject = this.newDiscussion.subject;\r\n        let  message = this.newDiscussion.message;\r\n        const pin = this.newDiscussion.pin;\r\n        const groupId = this.newDiscussion.groupId;\r\n        const attachments = this.newDiscussion.files;\r\n        const discTimecreated = this.timeCreated || Date.now();\r\n        const options: any = {\r\n            discussionsubscribe: !!this.newDiscussion.subscribe\r\n        };\r\n        let saveOffline = false;\r\n\r\n        if (!subject) {\r\n            this.domUtils.showErrorModal('addon.mod_forum.erroremptysubject', true);\r\n\r\n            return;\r\n        }\r\n        if (!message) {\r\n            this.domUtils.showErrorModal('addon.mod_forum.erroremptymessage', true);\r\n\r\n            return;\r\n        }\r\n\r\n        const modal = this.domUtils.showModalLoading('core.sending', true);\r\n        let promise;\r\n\r\n        // Add some HTML to the message if needed.\r\n        message = this.textUtils.formatHtmlLines(message);\r\n\r\n        // Upload attachments first if any.\r\n        if (attachments.length) {\r\n            promise = this.forumHelper.uploadOrStoreNewDiscussionFiles(this.forumId, discTimecreated, attachments, false)\r\n                    .catch(() => {\r\n                // Cannot upload them in online, save them in offline.\r\n                saveOffline = true;\r\n\r\n                return this.forumHelper.uploadOrStoreNewDiscussionFiles(this.forumId, discTimecreated, attachments, true);\r\n            });\r\n        } else {\r\n            promise = Promise.resolve();\r\n        }\r\n\r\n        promise.then((attach) => {\r\n            if (attach) {\r\n                options.attachmentsid = attach;\r\n            }\r\n            if (pin) {\r\n                options.discussionpinned = true;\r\n            }\r\n\r\n            if (saveOffline) {\r\n                // Save discussion in offline.\r\n                return this.forumOffline.addNewDiscussion(this.forumId, forumName, this.courseId, subject,\r\n                        message, options, groupId, discTimecreated).then(() => {\r\n                    // Don't return anything.\r\n                });\r\n            } else {\r\n                // Try to send it to server.\r\n                // Don't allow offline if there are attachments since they were uploaded fine.\r\n                return this.forumProvider.addNewDiscussion(this.forumId, forumName, this.courseId, subject, message, options,\r\n                        groupId, undefined, discTimecreated, !attachments.length);\r\n            }\r\n        }).then((discussionId) => {\r\n            if (discussionId) {\r\n                // Data sent to server, delete stored files (if any).\r\n                this.forumHelper.deleteNewDiscussionStoredFiles(this.forumId, discTimecreated);\r\n            }\r\n\r\n            this.returnToDiscussions(discussionId);\r\n        }).catch((message) => {\r\n            this.domUtils.showErrorModalDefault(message, 'addon.mod_forum.cannotcreatediscussion', true);\r\n        }).finally(() => {\r\n            modal.dismiss();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Discard an offline saved discussion.\r\n     */\r\n    discard(): void {\r\n        this.domUtils.showConfirm(this.translate.instant('core.areyousure')).then(() => {\r\n            const promises = [];\r\n\r\n            promises.push(this.forumOffline.deleteNewDiscussion(this.forumId, this.timeCreated));\r\n            promises.push(this.forumHelper.deleteNewDiscussionStoredFiles(this.forumId, this.timeCreated).catch(() => {\r\n                // Ignore errors, maybe there are no files.\r\n            }));\r\n\r\n            return Promise.all(promises).then(() => {\r\n                this.returnToDiscussions();\r\n            });\r\n        }).catch(() => {\r\n            // Cancelled.\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if we can leave the page or not.\r\n     *\r\n     * @return {boolean|Promise<void>} Resolved if we can leave it, rejected if not.\r\n     */\r\n    ionViewCanLeave(): boolean | Promise<void> {\r\n        let promise: any;\r\n\r\n        if (this.forumHelper.hasPostDataChanged(this.newDiscussion, this.originalData)) {\r\n            // Show confirmation if some data has been modified.\r\n            promise = this.domUtils.showConfirm(this.translate.instant('core.confirmcanceledit'));\r\n        } else {\r\n            promise = Promise.resolve();\r\n        }\r\n\r\n        return promise.then(() => {\r\n            // Delete the local files from the tmp folder.\r\n            this.uploaderProvider.clearTmpFiles(this.newDiscussion.files);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Runs when the page is about to leave and no longer be the active page.\r\n     */\r\n    ionViewWillLeave(): void {\r\n        this.syncObserver && this.syncObserver.off();\r\n    }\r\n\r\n    /**\r\n     * Page destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        if (this.syncId) {\r\n            this.syncProvider.unblockOperation(AddonModForumProvider.COMPONENT, this.syncId);\r\n        }\r\n        this.isDestroyed = true;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/addon/mod/forum/pages/new-discussion/new-discussion.ts"],"sourceRoot":""}